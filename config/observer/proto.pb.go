/*
Sniperkit-Bot
- Status: analyzed
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

// +build csall proto

package observer

import (
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *Configurations) Reset()         { *m = Configurations{} }
func (m *Configurations) String() string { return proto.CompactTextString(m) }
func (*Configurations) ProtoMessage()    {}
func (*Configurations) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_48777797b914ee35, []int{0}
}
func (m *Configurations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configurations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configurations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Configurations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configurations.Merge(dst, src)
}
func (m *Configurations) XXX_Size() int {
	return m.Size()
}
func (m *Configurations) XXX_DiscardUnknown() {
	xxx_messageInfo_Configurations.DiscardUnknown(m)
}

var xxx_messageInfo_Configurations proto.InternalMessageInfo

func (*Configurations) XXX_MessageName() string {
	return "observer.Configurations"
}
func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_48777797b914ee35, []int{1}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(dst, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (*Configuration) XXX_MessageName() string {
	return "observer.Configuration"
}
func init() {
	proto.RegisterType((*Configurations)(nil), "observer.Configurations")
	proto.RegisterType((*Configuration)(nil), "observer.Configuration")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProtoServiceClient is the client API for ProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProtoServiceClient interface {
	Register(ctx context.Context, in *Configurations, opts ...grpc.CallOption) (*types.Empty, error)
	Deregister(ctx context.Context, in *Configurations, opts ...grpc.CallOption) (*types.Empty, error)
}

type protoServiceClient struct {
	cc *grpc.ClientConn
}

func NewProtoServiceClient(cc *grpc.ClientConn) ProtoServiceClient {
	return &protoServiceClient{cc}
}

func (c *protoServiceClient) Register(ctx context.Context, in *Configurations, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/observer.ProtoService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) Deregister(ctx context.Context, in *Configurations, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/observer.ProtoService/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProtoService service

type ProtoServiceServer interface {
	Register(context.Context, *Configurations) (*types.Empty, error)
	Deregister(context.Context, *Configurations) (*types.Empty, error)
}

func RegisterProtoServiceServer(s *grpc.Server, srv ProtoServiceServer) {
	s.RegisterService(&_ProtoService_serviceDesc, srv)
}

func _ProtoService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configurations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/observer.ProtoService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).Register(ctx, req.(*Configurations))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configurations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/observer.ProtoService/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).Deregister(ctx, req.(*Configurations))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "observer.ProtoService",
	HandlerType: (*ProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ProtoService_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _ProtoService_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

func (m *Configurations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configurations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collection) > 0 {
		for _, msg := range m.Collection {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Route) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Route)))
		i += copy(dAtA[i:], m.Route)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Condition) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Condition)))
		i += copy(dAtA[i:], m.Condition)
	}
	return i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Configurations) Size() (n int) {
	var l int
	_ = l
	if len(m.Collection) > 0 {
		for _, e := range m.Collection {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	return n
}

func (m *Configuration) Size() (n int) {
	var l int
	_ = l
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func sovProto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Configurations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configurations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configurations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = append(m.Collection, &Configuration{})
			if err := m.Collection[len(m.Collection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = append(m.Condition[:0], dAtA[iNdEx:postIndex]...)
			if m.Condition == nil {
				m.Condition = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto.proto", fileDescriptor_proto_48777797b914ee35) }

var fileDescriptor_proto_48777797b914ee35 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x4f, 0x4e, 0xfa, 0x40,
	0x14, 0xc7, 0x3b, 0x3f, 0xe0, 0x17, 0x3a, 0x80, 0x8b, 0x59, 0x68, 0x83, 0xa6, 0x25, 0x2c, 0x0c,
	0x89, 0x71, 0x48, 0x70, 0xe1, 0xce, 0x18, 0x90, 0x85, 0x3b, 0x33, 0xba, 0x72, 0x67, 0xeb, 0x63,
	0x6c, 0x02, 0x7d, 0xcd, 0x74, 0x4a, 0xc2, 0x2d, 0x38, 0x80, 0x87, 0xf0, 0x18, 0x2c, 0x3d, 0x01,
	0xd1, 0x72, 0x11, 0x33, 0xd3, 0x20, 0xb2, 0x70, 0xe5, 0xa6, 0xe9, 0xfb, 0xbc, 0xcf, 0xfc, 0x79,
	0xdf, 0xa1, 0x8d, 0x54, 0xa1, 0x46, 0x6e, 0xbf, 0xac, 0x8e, 0x61, 0x06, 0x6a, 0x0e, 0xaa, 0x7d,
	0x2c, 0x11, 0xe5, 0x14, 0xfa, 0x96, 0x87, 0xf9, 0xa4, 0x0f, 0xb3, 0x54, 0x2f, 0x4a, 0xad, 0x7d,
	0x2e, 0x63, 0xfd, 0x92, 0x87, 0x3c, 0xc2, 0x59, 0x5f, 0xa2, 0xc4, 0x9d, 0x65, 0x2a, 0x5b, 0xd8,
	0xbf, 0x52, 0xef, 0xde, 0xd2, 0x83, 0x11, 0x26, 0x93, 0x58, 0xe6, 0xea, 0x49, 0xc7, 0x98, 0x64,
	0xec, 0x92, 0xd2, 0x08, 0xa7, 0x53, 0x88, 0x4c, 0xe9, 0x91, 0x4e, 0xa5, 0xd7, 0x18, 0x1c, 0xf1,
	0xed, 0xe1, 0x7c, 0xcf, 0x16, 0x3f, 0xd4, 0xee, 0x2b, 0xa1, 0xad, 0xbd, 0x2e, 0x0b, 0x68, 0x4d,
	0x61, 0xae, 0xc1, 0x23, 0x1d, 0xd2, 0x73, 0x87, 0x6e, 0xb1, 0x0e, 0x6a, 0xc2, 0x00, 0x51, 0x72,
	0x23, 0xc0, 0x1c, 0x12, 0xed, 0xfd, 0xdb, 0x09, 0x63, 0x03, 0x44, 0xc9, 0xd9, 0x09, 0xad, 0xea,
	0x45, 0x0a, 0x5e, 0xc5, 0xf6, 0xeb, 0xc5, 0x3a, 0xa8, 0x3e, 0x2c, 0x52, 0x10, 0x96, 0xb2, 0x33,
	0xea, 0x46, 0x98, 0x3c, 0xc7, 0xf6, 0xa6, 0xd5, 0x0e, 0xe9, 0x35, 0x87, 0xad, 0x62, 0x1d, 0xb8,
	0xa3, 0x2d, 0x14, 0xbb, 0xfe, 0x60, 0x49, 0x68, 0xf3, 0xce, 0xcc, 0x7c, 0x0f, 0x6a, 0x1e, 0x47,
	0xc0, 0xae, 0x68, 0x5d, 0x80, 0x8c, 0x33, 0x0d, 0x8a, 0x79, 0xbf, 0x0c, 0x98, 0xb5, 0x0f, 0x79,
	0x99, 0x36, 0xdf, 0xe6, 0xc8, 0xc7, 0x26, 0xed, 0xae, 0xc3, 0xae, 0x29, 0xbd, 0x01, 0xf5, 0x87,
	0x1d, 0x86, 0xa7, 0xab, 0x4f, 0xdf, 0x59, 0x15, 0x3e, 0x79, 0x2f, 0x7c, 0xf2, 0x51, 0xf8, 0x64,
	0xb9, 0xf1, 0x9d, 0xb7, 0x8d, 0xef, 0xac, 0x36, 0x3e, 0x79, 0xfc, 0x7e, 0xf0, 0xf0, 0xbf, 0x5d,
	0x79, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0x05, 0x0c, 0x84, 0xb6, 0x10, 0x02, 0x00, 0x00,
}
